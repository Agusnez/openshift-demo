{"version":3,"sources":["components/contacts.js","App.js","serviceWorker.js","index.js"],"names":["Contacts","this","props","contacts","length","notification","className","role","map","contact","key","phone","name","Button","variant","onClick","action","React","Component","App","openModal","setState","show","closeModal","addContact","fetch","method","headers","body","JSON","stringify","state","then","res","refreshContacts","handleChange","bind","handleSubmit","handleChildFunc","event","target","value","preventDefault","json","data","catch","console","log","Modal","onHide","Header","closeButton","Title","Body","onSubmit","htmlFor","type","id","onChange","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTA6CeA,E,iLArCD,IAAD,OAET,GAAmC,IAA/BC,KAAKC,MAAMC,SAASC,OACpB,IAAIC,EAAe,yBAAKC,UAAU,sBAAsBC,KAAK,SAA1C,kCAKvB,OACI,yBAAKD,UAAU,kBACf,oDACCD,EAEAJ,KAAKC,MAAMC,SAASK,KAAI,SAACC,GAAD,OACrB,yBAAKH,UAAU,WAAWI,IAAKD,EAAQE,OACnC,yBAAKL,UAAU,OACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAcG,EAAQG,MACpC,wBAAIN,UAAU,iCAAiCG,EAAQE,QAE3D,yBAAKL,UAAU,eACf,kBAACO,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QAAS,kBAAM,EAAKb,MAAMc,OAAOP,EAAQE,SAA1E,sB,GAxBDM,IAAMC,W,QCgHdC,E,YA/Gb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KA8BRkB,UAAY,kBAAM,EAAKC,SAAS,CAAEC,MAAM,KA/BrB,EAgCnBC,WAAa,kBAAM,EAAKF,SAAS,CAAEC,MAAM,KAhCtB,EA2CnBE,WAAa,WACXC,MAAM,YAAa,CACjBC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACjBlB,KAAM,EAAKmB,MAAMnB,KACjBD,MAAO,EAAKoB,MAAMpB,UAErBqB,MAAK,SAACC,GACP,EAAKC,sBArDP,EAAKH,MAAQ,CACX5B,SAAU,GACVmB,MAAM,EACNV,KAAM,GACND,MAAO,IAET,EAAKwB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBAVN,E,0EAaNG,GACX,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACf7B,EAAO4B,EAAO5B,KAEpBX,KAAKoB,SAAL,eACGT,EAAO6B,M,mCAICF,GACXtC,KAAKuB,aACLvB,KAAKsB,aACLtB,KAAKoB,SAAS,CAACT,KAAM,KACrBX,KAAKoB,SAAS,CAACV,MAAO,KACtB4B,EAAMG,mB,wCAMW,IAAD,OAChBjB,MAAM,YACHO,MAAK,SAAAC,GAAG,OAAIA,EAAIU,UAChBX,MAAK,SAACY,GACL,EAAKvB,SAAS,CAAElB,SAAUyC,OAE3BC,MAAMC,QAAQC,O,0CAoBjB9C,KAAKiC,oB,sCAGSvB,GAAQ,IAAD,OACrBc,MAAM,WAAD,OAAYd,GAAS,CACde,OAAQ,WACLM,MAAK,SAACC,GACP,EAAKC,uB,+BAKnB,OACE,oCACE,kBAACc,EAAA,EAAD,CAAO1B,KAAMrB,KAAK8B,MAAMT,KAAM2B,OAAQhD,KAAKsB,YACzC,kBAACyB,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,wBAGF,kBAACJ,EAAA,EAAMK,KAAP,KACE,0BAAMC,SAAUrD,KAAKoC,cACnB,yBAAK/B,UAAU,aACb,2BAAOiD,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAOC,GAAG,OAAO7C,KAAK,OAAON,UAAU,eAAemC,MAAOxC,KAAK8B,MAAMnB,KAAM8C,SAAUzD,KAAKkC,eACzG,6BACA,2BAAOoB,QAAQ,SAAf,eACA,2BAAOC,KAAK,OAAOC,GAAG,QAAQ7C,KAAK,QAAQN,UAAU,eAAemC,MAAOxC,KAAK8B,MAAMpB,MAAO+C,SAAUzD,KAAKkC,kBAKlH,kBAACa,EAAA,EAAMW,OAAP,KACE,kBAAC9C,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASd,KAAKsB,YAA1C,UACA,kBAACV,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASd,KAAKoC,cAAxC,sBAIJ,yBAAK/B,UAAU,uBACb,yBAAKA,UAAU,OACb,kBAACO,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASd,KAAKmB,WAAxC,uBAKF,kBAAC,EAAD,CAAUjB,SAAUF,KAAK8B,MAAM5B,SAAUa,OAAQf,KAAKqC,wB,GAzG9CpB,aCME0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.f8c42afa.chunk.js","sourcesContent":["// src/components/contacts.js\n\nimport React from 'react'\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\n\nclass Contacts extends React.Component{\n\n    render() {\n\n    if (this.props.contacts.length === 0) {\n        var notification = <div className=\"alert alert-primary\" role=\"alert\">\n        No hay contactos en la agenda.\n      </div>\n    }\n\n    return (\n        <div className=\"container mt-5\">\n        <h1>Libreta de contactos</h1>\n        {notification}\n\n        {this.props.contacts.map((contact) => (\n            <div className=\"row mt-3\" key={contact.phone}>\n                <div className=\"col\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{contact.name}</h5>\n                            <h6 className=\"card-subtitle mb-2 text-muted\">{contact.phone}</h6>\n                        </div>\n                        <div className=\"card-footer\">\n                        <Button variant=\"outline-danger\" onClick={() => this.props.action(contact.phone)}>Borrar</Button>    \n                        </div>\n                    </div>\n                </div>\n            </div>\n        ))}\n        </div>\n    )}\n\n};\n\nContacts.propTypes = {\n    delete: PropTypes.func\n};\n\nexport default Contacts","import './App.css';\nimport React, { Component } from 'react';\nimport Contacts from './components/contacts';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: [],\n      show: false,\n      name: '',\n      phone: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChildFunc = this.handleChildFunc.bind(this);\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    this.addContact();\n    this.closeModal();\n    this.setState({name: ''});\n    this.setState({phone: ''});\n    event.preventDefault();\n  }\n\n  openModal = () => this.setState({ show: true })\n  closeModal = () => this.setState({ show: false })\n\n  refreshContacts() {\n    fetch(`contacts`)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ contacts: data })\n      })\n      .catch(console.log)\n  }\n\n  addContact = () => {\n    fetch(`contacts/`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n          name: this.state.name,\n          phone: this.state.phone,\n      })\n    }).then((res) => {\n      this.refreshContacts();\n    })\n  }\n\n  componentDidMount() {\n    this.refreshContacts();\n  }\n\n  handleChildFunc(phone) {\n    fetch(`contact/${phone}`, {\n                method: 'DELETE',\n                }).then((res) => {\n                  this.refreshContacts();\n                });\n  }\n\n  render() {\n    return (\n      <>\n        <Modal show={this.state.show} onHide={this.closeModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Nuevo contacto</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"formGroup\">\n                <label htmlFor=\"name\">Nombre</label>\n                <input type=\"text\" id=\"name\" name=\"name\" className=\"form-control\" value={this.state.name} onChange={this.handleChange} />\n                <br/>\n                <label htmlFor=\"phone\">Teléfono</label>\n                <input type=\"text\" id=\"phone\" name=\"phone\" className=\"form-control\" value={this.state.phone} onChange={this.handleChange} />\n              </div>\n            </form>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.closeModal}>Cerrar</Button>\n            <Button variant=\"primary\" onClick={this.handleSubmit}>Guardar contacto</Button>\n          </Modal.Footer>\n        </Modal>\n\n        <div className=\"container mt-5 mb-5\">\n          <div className=\"row\">\n            <Button variant=\"primary\" onClick={this.openModal}>\n              Añadir contacto\n            </Button>\n          </div>\n\n          <Contacts contacts={this.state.contacts} action={this.handleChildFunc}/>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}